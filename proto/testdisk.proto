syntax = "proto3";

package testdisk;

// Service definition for TestDisk file recovery operations
service TestDiskService {
  // Initialize TestDisk context and discover available disks
  rpc Initialize(InitializeRequest) returns (InitializeResponse);
  
  // Add an image file to the context
  rpc AddImage(AddImageRequest) returns (AddImageResponse);

  // Get list of available disks
  rpc GetDisks(GetDisksRequest) returns (GetDisksResponse);
  
  // Get list of partitions on a disk
  rpc GetPartitions(GetPartitionsRequest) returns (GetPartitionsResponse);
  
  // Get available partition table architectures
  rpc GetArchs(GetArchsRequest) returns (GetArchsResponse);
  
  // Set architecture for current disk
  rpc SetArchForCurrentDisk(SetArchForCurrentDiskRequest) returns (SetArchForCurrentDiskResponse);
  
  // Get file type options configuration
  rpc GetFileOptions(GetFileOptionsRequest) returns (GetFileOptionsResponse);
  
  // Start file recovery process
  rpc StartRecovery(StartRecoveryRequest) returns (StartRecoveryResponse);
  
  // Get recovery status and progress
  rpc GetRecoveryStatus(GetRecoveryStatusRequest) returns (GetRecoveryStatusResponse);
  
  // Stop/abort recovery process
  rpc StopRecovery(StopRecoveryRequest) returns (StopRecoveryResponse);
  
  // Configure recovery options
  rpc ConfigureOptions(ConfigureOptionsRequest) returns (ConfigureOptionsResponse);
  
  // Get recovery statistics
  rpc GetStatistics(GetStatisticsRequest) returns (GetStatisticsResponse);
  
  // Clean up resources
  rpc Cleanup(CleanupRequest) returns (CleanupResponse);
  
  // Shutdown the server
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
  
  // Check server liveness
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // ============================================================================
  // PARTITION RECOVERY OPERATIONS - Search and Recovery
  // ============================================================================
  
  // Search for partitions on disk
  rpc SearchPartitions(SearchPartitionsRequest) returns (SearchPartitionsResponse);
  
  // Validate disk geometry settings
  rpc ValidateDiskGeometry(ValidateDiskGeometryRequest) returns (ValidateDiskGeometryResponse);
  
  // Write partition table to disk
  rpc WritePartitionTable(WritePartitionTableRequest) returns (WritePartitionTableResponse);
  
  // ============================================================================
  // PARTITION STRUCTURE OPERATIONS - Navigation and Management
  // ============================================================================
  
  // Test partition structure validity
  rpc TestPartitionStructure(TestPartitionStructureRequest) returns (TestPartitionStructureResponse);
  
  // Change partition status to next state
  rpc ChangePartitionStatusNext(ChangePartitionStatusNextRequest) returns (ChangePartitionStatusNextResponse);
  
  // Change partition status to previous state
  rpc ChangePartitionStatusPrev(ChangePartitionStatusPrevRequest) returns (ChangePartitionStatusPrevResponse);
  
  // Change partition type
  rpc ChangePartitionType(ChangePartitionTypeRequest) returns (ChangePartitionTypeResponse);
  
  // List files in partition
  rpc ListPartitionFiles(ListPartitionFilesRequest) returns (ListPartitionFilesResponse);
  
  // Save partition table backup
  rpc SavePartitionBackup(SavePartitionBackupRequest) returns (SavePartitionBackupResponse);
  
  // Load partition table from backup
  rpc LoadPartitionBackup(LoadPartitionBackupRequest) returns (LoadPartitionBackupResponse);
  
  // ============================================================================
  // CONFIGURATION FUNCTIONS - Recovery Partition Operations
  // ============================================================================
  
  // Delete partition table
  rpc DeletePartitionTable(DeletePartitionTableRequest) returns (DeletePartitionTableResponse);
  
  // Write MBR code
  rpc WriteMbrCode(WriteMbrCodeRequest) returns (WriteMbrCodeResponse);
  
  // Ensure single bootable partition
  rpc EnsureSingleBootablePartition(EnsureSingleBootablePartitionRequest) returns (EnsureSingleBootablePartitionResponse);
}

// Initialize TestDisk context
message InitializeRequest {
  repeated string args = 1;       // Command line arguments (equivalent to argc/argv)
  int32 log_mode = 2;            // Log mode: 0=no log, 1=info, 2=debug
  string log_file = 3;           // Log file path (optional)
}

message InitializeResponse {
  bool success = 1;
  string error_message = 2;
  string context_id = 3;      // Unique context identifier
}

// Add image file to context
message AddImageRequest {
  string context_id = 1;
  string image_file = 2;      // Path to image file
}

message AddImageResponse {
  bool success = 1;
  string error_message = 2;
  DiskInfo disk_info = 3;     // Information about the added image (optional)
}

// Get available disks
message GetDisksRequest {
  string context_id = 1;
}

message DiskInfo {
  string device = 1;
  string description = 2;
  uint64 size = 3;
  string model = 4;
  string serial_no = 5;
  string firmware_rev = 6;
  string arch = 7;                    // Current partition table architecture
  string autodetected_arch = 8;       // Auto-detected partition table architecture
}

message GetDisksResponse {
  bool success = 1;
  string error_message = 2;
  repeated DiskInfo disks = 3;
}

// Get partitions on a disk
message GetPartitionsRequest {
  string context_id = 1;
  string device = 2;
}

// Partition status types
enum PartitionStatus {
  STATUS_DELETED = 0;
  STATUS_PRIM = 1;
  STATUS_PRIM_BOOT = 2;
  STATUS_LOG = 3;
  STATUS_EXT = 4;
  STATUS_EXT_IN_EXT = 5;
}

// Unified partition types
enum UnifiedPartitionType {
  UP_UNK = 0;
  UP_APFS = 1;
  UP_BEOS = 2;
  UP_BTRFS = 3;
  UP_CRAMFS = 4;
  UP_EXFAT = 5;
  UP_EXT2 = 6;
  UP_EXT3 = 7;
  UP_EXT4 = 8;
  UP_EXTENDED = 9;
  UP_FAT12 = 10;
  UP_FAT16 = 11;
  UP_FAT32 = 12;
  UP_FATX = 13;
  UP_FREEBSD = 14;
  UP_F2FS = 15;
  UP_GFS2 = 16;
  UP_HFS = 17;
  UP_HFSP = 18;
  UP_HFSX = 19;
  UP_HPFS = 20;
  UP_ISO = 21;
  UP_JFS = 22;
  UP_LINSWAP = 23;
  UP_LINSWAP2 = 24;
  UP_LINSWAP_8K = 25;
  UP_LINSWAP2_8K = 26;
  UP_LINSWAP2_8KBE = 27;
  UP_LUKS = 28;
  UP_LVM = 29;
  UP_LVM2 = 30;
  UP_MD = 31;
  UP_MD1 = 32;
  UP_NETWARE = 33;
  UP_NTFS = 34;
  UP_OPENBSD = 35;
  UP_OS2MB = 36;
  UP_ReFS = 37;
  UP_RFS = 38;
  UP_RFS2 = 39;
  UP_RFS3 = 40;
  UP_RFS4 = 41;
  UP_SUN = 42;
  UP_SYSV4 = 43;
  UP_UFS = 44;
  UP_UFS2 = 45;
  UP_UFS_LE = 46;
  UP_UFS2_LE = 47;
  UP_VMFS = 48;
  UP_WBFS = 49;
  UP_XFS = 50;
  UP_XFS2 = 51;
  UP_XFS3 = 52;
  UP_XFS4 = 53;
  UP_XFS5 = 54;
  UP_ZFS = 55;
}

// Error code types
enum ErrorCodeType {
  BAD_NOERR = 0;
  BAD_SS = 1;
  BAD_ES = 2;
  BAD_SH = 3;
  BAD_EH = 4;
  BAD_EBS = 5;
  BAD_RS = 6;
  BAD_SC = 7;
  BAD_EC = 8;
  BAD_SCOUNT = 9;
}

// EFI GUID structure
message EfiGuid {
  uint32 time_low = 1;
  uint32 time_mid = 2;
  uint32 time_hi_and_version = 3;
  uint32 clock_seq_hi_and_reserved = 4;  // uint8_t as uint32 for protobuf
  uint32 clock_seq_low = 5;              // uint8_t as uint32 for protobuf
  bytes node = 6;                        // uint8_t[6] as bytes
}

message PartitionInfo {
  string name = 1;                    // partname
  string filesystem = 2;              // fsname
  uint64 offset = 3;                  // part_offset
  uint64 size = 4;                    // part_size
  string info = 5;                    // info
  int32 order = 6;                    // order
  PartitionStatus status = 7;          // status
  uint64 superblock_origin_offset = 8; // sborg_offset
  uint64 superblock_offset = 9;       // sb_offset
  uint32 superblock_size = 10;        // sb_size
  uint32 blocksize = 11;              // blocksize
  EfiGuid partition_uuid = 12;        // part_uuid
  EfiGuid partition_type_gpt = 13;    // part_type_gpt
  uint32 partition_type_humax = 14;   // part_type_humax
  uint32 partition_type_i386 = 15;    // part_type_i386
  uint32 partition_type_mac = 16;     // part_type_mac
  uint32 partition_type_sun = 17;     // part_type_sun
  uint32 partition_type_xbox = 18;    // part_type_xbox
  UnifiedPartitionType unified_type = 19; // upart_type
  ErrorCodeType error_code = 20;      // errcode
}

message GetPartitionsResponse {
  bool success = 1;
  string error_message = 2;
  repeated PartitionInfo partitions = 3;
}

// Get available partition table architectures
message GetArchsRequest {
  string context_id = 1;
}

message ArchInfo {
  string name = 1;         // Architecture name (part_name_option)
  string description = 2;  // Architecture description (part_name)
  string type = 3;         // Human-readable type/description (msg_part_type)
  bool is_available = 4;
}

message GetArchsResponse {
  bool success = 1;
  string error_message = 2;
  repeated ArchInfo architectures = 3;
}

// Set architecture for current disk
message SetArchForCurrentDiskRequest {
  string context_id = 1;
  string arch_name = 2;                // Architecture name to set (can be empty for auto-detect)
}

message SetArchForCurrentDiskResponse {
  bool success = 1;
  string error_message = 2;
  string selected_arch = 3;            // Name of the selected architecture
}

// Get file type options configuration
message GetFileOptionsRequest {
  string context_id = 1;
}

message FileTypeOption {
  string extension = 1;                // File extension (e.g., "jpg", "pdf")
  string description = 2;              // Human-readable description
  uint64 max_filesize = 3;            // Maximum expected file size
  bool is_enabled = 4;                // Whether this file type is enabled for recovery
  bool enabled_by_default = 5;        // Whether this type is enabled by default
}

message GetFileOptionsResponse {
  bool success = 1;
  string error_message = 2;
  repeated FileTypeOption file_types = 3;
}

// Start recovery process
message StartRecoveryRequest {
  string context_id = 1;
  string device = 2;
  int32 partition_order = 3;  // -1 for entire disk, >=0 for specific partition
  string recovery_dir = 4;
  RecoveryOptions options = 5;
}

message RecoveryOptions {
  int32 paranoid_mode = 1;           // 0-2
  bool keep_corrupted_files = 2;
  bool enable_ext2_optimization = 3;
  bool expert_mode = 4;
  bool low_memory_mode = 5;
  bool verbose_output = 6;
  bool carve_free_space_only = 7;
  repeated string enabled_file_types = 8;
  repeated string disabled_file_types = 9;
}

message StartRecoveryResponse {
  bool success = 1;
  string error_message = 2;
  string recovery_id = 3;
}

// Get recovery status
message GetRecoveryStatusRequest {
  string context_id = 1;
  string recovery_id = 2;
}

message RecoveryStatus {
  string status = 1;           // Current recovery phase
  uint64 current_offset = 2;   // Current recovery offset
  uint64 total_size = 3;       // Total size to scan
  uint32 files_recovered = 4;  // Number of files recovered
  uint32 directories_created = 5;
  bool is_complete = 6;
  string error_message = 7;
  uint32 dir_num = 8;
}

message GetRecoveryStatusResponse {
  bool success = 1;
  string error_message = 2;
  RecoveryStatus status = 3;
}

// Stop recovery
message StopRecoveryRequest {
  string context_id = 1;
  string recovery_id = 2;
}

message StopRecoveryResponse {
  bool success = 1;
  string error_message = 2;
}

// Configure options
message ConfigureOptionsRequest {
  string context_id = 1;
  RecoveryOptions options = 2;
}

message ConfigureOptionsResponse {
  bool success = 1;
  string error_message = 2;
}

// Get statistics
message GetStatisticsRequest {
  string context_id = 1;
}

message FileTypeStatistics {
  string file_type = 1;
  uint32 recovered = 2;
  uint32 failed = 3;
  string description = 4;
}

message GetStatisticsResponse {
  bool success = 1;
  string error_message = 2;
  repeated FileTypeStatistics statistics = 3;
  uint32 total_files_recovered = 4;
  uint32 total_files_failed = 5;
}

// Cleanup
message CleanupRequest {
  string context_id = 1;
}

message CleanupResponse {
  bool success = 1;
  string error_message = 2;
}

// Shutdown the server
message ShutdownRequest {
  bool force = 1;              // Force shutdown even if there are active recoveries
  string reason = 2;           // Optional reason for shutdown
}

message ShutdownResponse {
  bool success = 1;
  string error_message = 2;
  string message = 3;          // Status message about shutdown
}

// Check server liveness
message HeartbeatRequest {
  // Optional: can be empty for simple liveness check
  string context_id = 1;
}

message HeartbeatResponse {
  bool success = 1;
  string error_message = 2;
  string server_version = 3;    // Server version information
  int64 uptime_seconds = 4;     // Server uptime in seconds
  int32 active_contexts = 5;    // Number of active contexts
  int32 active_recoveries = 6;  // Number of active recovery sessions
}

// ============================================================================
// PARTITION RECOVERY OPERATIONS - Search and Recovery
// ============================================================================

// Search for partitions on disk
message SearchPartitionsRequest {
  string context_id = 1;
  int32 fast_mode = 2;        // Fast mode level (0=comprehensive, 1=fast, 2=very fast)
  int32 dump_ind = 3;         // Dump index for detailed output
}

message SearchPartitionsResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 on success, -1 on error
}

// Validate disk geometry settings
message ValidateDiskGeometryRequest {
  string context_id = 1;
}

message ValidateDiskGeometryResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 if geometry is valid, non-zero if issues detected
}

// Write partition table to disk
message WritePartitionTableRequest {
  string context_id = 1;
  bool simulate = 2;          // If true, only simulate the write operation
  bool no_confirm = 3;        // If true, skip confirmation prompts
}

message WritePartitionTableResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 on success, -1 on error
}

// ============================================================================
// PARTITION STRUCTURE OPERATIONS - Navigation and Management
// ============================================================================

// Test partition structure validity
message TestPartitionStructureRequest {
  string context_id = 1;
}

message TestPartitionStructureResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 if structure is valid, non-zero if invalid
}

// Change partition status to next state
message ChangePartitionStatusNextRequest {
  string context_id = 1;
  int32 order = 2;            // Partition order number
}

message ChangePartitionStatusNextResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 on success, -1 on error
}

// Change partition status to previous state
message ChangePartitionStatusPrevRequest {
  string context_id = 1;
  int32 order = 2;            // Partition order number
}

message ChangePartitionStatusPrevResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 on success, -1 on error
}

// Change partition type
message ChangePartitionTypeRequest {
  string context_id = 1;
  int32 order = 2;            // Partition order number
  uint32 part_type = 3;       // New partition type value
}

message ChangePartitionTypeResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 on success, -1 on error
}

// List files in partition
message ListPartitionFilesRequest {
  string context_id = 1;
  int32 order = 2;            // Partition order number
}

message ListPartitionFilesResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 on success, -1 on error
}

// Save partition table backup
message SavePartitionBackupRequest {
  string context_id = 1;
}

message SavePartitionBackupResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 on success, -1 on error
}

// Load partition table from backup
message LoadPartitionBackupRequest {
  string context_id = 1;
}

message LoadPartitionBackupResponse {
  bool success = 1;
  string error_message = 2;
  int32 result = 3;           // 0 on success, -1 on error
}

// ============================================================================
// CONFIGURATION FUNCTIONS - Recovery Partition Operations
// ============================================================================

// Delete partition table
message DeletePartitionTableRequest {
  string context_id = 1;
  string device = 2;          // Device path
}

message DeletePartitionTableResponse {
  bool success = 1;
  string error_message = 2;
}

// Write MBR code
message WriteMbrCodeRequest {
  string context_id = 1;
  string device = 2;          // Device path
}

message WriteMbrCodeResponse {
  bool success = 1;
  string error_message = 2;
}

// Ensure single bootable partition
message EnsureSingleBootablePartitionRequest {
  string context_id = 1;
}

message EnsureSingleBootablePartitionResponse {
  bool success = 1;
  string error_message = 2;
} 